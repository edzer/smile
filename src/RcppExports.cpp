// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// crossdist
arma::mat crossdist(const arma::mat& m1, const arma::mat& m2);
RcppExport SEXP _spmismo_crossdist(SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(crossdist(m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// single_matern
double single_matern(double d, double sigsq, double phi, double kappa);
RcppExport SEXP _spmismo_single_matern(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern(d, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// single_matern3
double single_matern3(double d, double sigsq, double phi);
RcppExport SEXP _spmismo_single_matern3(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern3(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_matern5
double single_matern5(double d, double sigsq, double phi);
RcppExport SEXP _spmismo_single_matern5(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern5(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_exp
double single_exp(double d, double sigsq, double phi);
RcppExport SEXP _spmismo_single_exp(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_exp(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// mat_cov
arma::mat mat_cov(const arma::mat& dists, double sigsq, double phi, double kappa);
RcppExport SEXP _spmismo_mat_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_cov(dists, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// comp_mat_cov
arma::mat comp_mat_cov(const List& cross_dists, int n, int n2, double sigsq, double phi, double kappa);
RcppExport SEXP _spmismo_comp_mat_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_mat_cov(cross_dists, n, n2, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// single_pexp
double single_pexp(double d, double sigsq, double phi, double kappa);
RcppExport SEXP _spmismo_single_pexp(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_pexp(d, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// pexp_cov
arma::mat pexp_cov(const arma::mat& dists, double sigsq, double phi, double kappa);
RcppExport SEXP _spmismo_pexp_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(pexp_cov(dists, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// comp_pexp_cov
arma::mat comp_pexp_cov(const List& cross_dists, int n, int n2, double sigsq, double phi, double kappa);
RcppExport SEXP _spmismo_comp_pexp_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_pexp_cov(cross_dists, n, n2, sigsq, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// single_gauss
double single_gauss(double d, double sigsq, double phi);
RcppExport SEXP _spmismo_single_gauss(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_gauss(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// gauss_cov
arma::mat gauss_cov(const arma::mat& dists, double sigsq, double phi);
RcppExport SEXP _spmismo_gauss_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_cov(dists, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// comp_gauss_cov
arma::mat comp_gauss_cov(const List& cross_dists, int n, int n2, double sigsq, double phi);
RcppExport SEXP _spmismo_comp_gauss_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_gauss_cov(cross_dists, n, n2, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_spher
double single_spher(double d, double sigsq, double phi);
RcppExport SEXP _spmismo_single_spher(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_spher(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// spher_cov
arma::mat spher_cov(const arma::mat& dists, double sigsq, double phi);
RcppExport SEXP _spmismo_spher_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(spher_cov(dists, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// comp_spher_cov
arma::mat comp_spher_cov(const List& cross_dists, int n, int n2, double sigsq, double phi);
RcppExport SEXP _spmismo_comp_spher_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_spher_cov(cross_dists, n, n2, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spmismo_crossdist", (DL_FUNC) &_spmismo_crossdist, 2},
    {"_spmismo_single_matern", (DL_FUNC) &_spmismo_single_matern, 4},
    {"_spmismo_single_matern3", (DL_FUNC) &_spmismo_single_matern3, 3},
    {"_spmismo_single_matern5", (DL_FUNC) &_spmismo_single_matern5, 3},
    {"_spmismo_single_exp", (DL_FUNC) &_spmismo_single_exp, 3},
    {"_spmismo_mat_cov", (DL_FUNC) &_spmismo_mat_cov, 4},
    {"_spmismo_comp_mat_cov", (DL_FUNC) &_spmismo_comp_mat_cov, 6},
    {"_spmismo_single_pexp", (DL_FUNC) &_spmismo_single_pexp, 4},
    {"_spmismo_pexp_cov", (DL_FUNC) &_spmismo_pexp_cov, 4},
    {"_spmismo_comp_pexp_cov", (DL_FUNC) &_spmismo_comp_pexp_cov, 6},
    {"_spmismo_single_gauss", (DL_FUNC) &_spmismo_single_gauss, 3},
    {"_spmismo_gauss_cov", (DL_FUNC) &_spmismo_gauss_cov, 3},
    {"_spmismo_comp_gauss_cov", (DL_FUNC) &_spmismo_comp_gauss_cov, 5},
    {"_spmismo_single_spher", (DL_FUNC) &_spmismo_single_spher, 3},
    {"_spmismo_spher_cov", (DL_FUNC) &_spmismo_spher_cov, 3},
    {"_spmismo_comp_spher_cov", (DL_FUNC) &_spmismo_comp_spher_cov, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_spmismo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
