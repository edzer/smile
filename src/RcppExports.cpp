// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// single_matern
double single_matern(double d, double sigsq, double phi, double nu);
RcppExport SEXP _smile_single_matern(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern(d, sigsq, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// single_matern3
double single_matern3(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_matern3(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern3(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_matern5
double single_matern5(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_matern5(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_matern5(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_exp
double single_exp(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_exp(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_exp(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// mat_cov
arma::mat mat_cov(const arma::mat& dists, double sigsq, double phi, double nu);
RcppExport SEXP _smile_mat_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_cov(dists, sigsq, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// aux_matern
double aux_matern(arma::mat dist, double sigsq, double phi, double nu);
RcppExport SEXP _smile_aux_matern(SEXP distSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_matern(dist, sigsq, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// comp_mat_cov
arma::mat comp_mat_cov(const List& cross_dists, int n, int n2, double sigsq, double phi, double nu);
RcppExport SEXP _smile_comp_mat_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_mat_cov(cross_dists, n, n2, sigsq, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// single_pexp
double single_pexp(double d, double sigsq, double phi, double nu);
RcppExport SEXP _smile_single_pexp(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(single_pexp(d, sigsq, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// pexp_cov
arma::mat pexp_cov(const arma::mat& dists, double sigsq, double phi, double nu);
RcppExport SEXP _smile_pexp_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(pexp_cov(dists, sigsq, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// aux_pexp
double aux_pexp(arma::mat dist, double sigsq, double phi, double nu);
RcppExport SEXP _smile_aux_pexp(SEXP distSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_pexp(dist, sigsq, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// comp_pexp_cov
arma::mat comp_pexp_cov(const List& cross_dists, int n, int n2, double sigsq, double phi, double nu);
RcppExport SEXP _smile_comp_pexp_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_pexp_cov(cross_dists, n, n2, sigsq, phi, nu));
    return rcpp_result_gen;
END_RCPP
}
// single_gauss
double single_gauss(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_gauss(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_gauss(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// gauss_cov
arma::mat gauss_cov(const arma::mat& dists, double sigsq, double phi);
RcppExport SEXP _smile_gauss_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(gauss_cov(dists, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// aux_gauss
double aux_gauss(arma::mat dist, double sigsq, double phi);
RcppExport SEXP _smile_aux_gauss(SEXP distSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_gauss(dist, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// comp_gauss_cov
arma::mat comp_gauss_cov(const List& cross_dists, int n, int n2, double sigsq, double phi);
RcppExport SEXP _smile_comp_gauss_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_gauss_cov(cross_dists, n, n2, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_spher
double single_spher(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_spher(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_spher(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// spher_cov
arma::mat spher_cov(const arma::mat& dists, double sigsq, double phi);
RcppExport SEXP _smile_spher_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(spher_cov(dists, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// aux_spher
double aux_spher(arma::mat dist, double sigsq, double phi);
RcppExport SEXP _smile_aux_spher(SEXP distSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_spher(dist, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// comp_spher_cov
arma::mat comp_spher_cov(const List& cross_dists, int n, int n2, double sigsq, double phi);
RcppExport SEXP _smile_comp_spher_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_spher_cov(cross_dists, n, n2, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_cs
double single_cs(double d, double sigsq, double phi);
RcppExport SEXP _smile_single_cs(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(single_cs(d, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// cs_cov
arma::mat cs_cov(const arma::mat& dists, double sigsq, double phi);
RcppExport SEXP _smile_cs_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(cs_cov(dists, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// aux_cs
double aux_cs(arma::mat dist, double sigsq, double phi);
RcppExport SEXP _smile_aux_cs(SEXP distSEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_cs(dist, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// comp_cs_cov
arma::mat comp_cs_cov(const List& cross_dists, int n, int n2, double sigsq, double phi);
RcppExport SEXP _smile_comp_cs_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_cs_cov(cross_dists, n, n2, sigsq, phi));
    return rcpp_result_gen;
END_RCPP
}
// single_gw0
double single_gw0(double d, double sigsq, double phi, double mu);
RcppExport SEXP _smile_single_gw0(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(single_gw0(d, sigsq, phi, mu));
    return rcpp_result_gen;
END_RCPP
}
// single_gw1
double single_gw1(double d, double sigsq, double phi, double mu);
RcppExport SEXP _smile_single_gw1(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(single_gw1(d, sigsq, phi, mu));
    return rcpp_result_gen;
END_RCPP
}
// single_gw2
double single_gw2(double d, double sigsq, double phi, double mu);
RcppExport SEXP _smile_single_gw2(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(single_gw2(d, sigsq, phi, mu));
    return rcpp_result_gen;
END_RCPP
}
// single_gw3
double single_gw3(double d, double sigsq, double phi, double mu);
RcppExport SEXP _smile_single_gw3(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(single_gw3(d, sigsq, phi, mu));
    return rcpp_result_gen;
END_RCPP
}
// single_gw
double single_gw(double d, double sigsq, double phi, int kappa, double mu);
RcppExport SEXP _smile_single_gw(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(single_gw(d, sigsq, phi, kappa, mu));
    return rcpp_result_gen;
END_RCPP
}
// gw_cov
arma::mat gw_cov(const arma::mat& dists, double sigsq, double phi, int kappa, double mu);
RcppExport SEXP _smile_gw_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(gw_cov(dists, sigsq, phi, kappa, mu));
    return rcpp_result_gen;
END_RCPP
}
// aux_gw
double aux_gw(arma::mat dist, double sigsq, double phi, int kappa, double mu);
RcppExport SEXP _smile_aux_gw(SEXP distSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_gw(dist, sigsq, phi, kappa, mu));
    return rcpp_result_gen;
END_RCPP
}
// comp_gw_cov
arma::mat comp_gw_cov(const List& cross_dists, int n, int n2, double sigsq, double phi, int kappa, double mu);
RcppExport SEXP _smile_comp_gw_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP kappaSEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_gw_cov(cross_dists, n, n2, sigsq, phi, kappa, mu));
    return rcpp_result_gen;
END_RCPP
}
// single_tapmat
double single_tapmat(double d, double sigsq, double phi, double nu, double theta);
RcppExport SEXP _smile_single_tapmat(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_tapmat(d, sigsq, phi, nu, theta));
    return rcpp_result_gen;
END_RCPP
}
// single_tapmat1
double single_tapmat1(double d, double sigsq, double phi, double theta);
RcppExport SEXP _smile_single_tapmat1(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_tapmat1(d, sigsq, phi, theta));
    return rcpp_result_gen;
END_RCPP
}
// single_tapmat3
double single_tapmat3(double d, double sigsq, double phi, double theta);
RcppExport SEXP _smile_single_tapmat3(SEXP dSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_tapmat3(d, sigsq, phi, theta));
    return rcpp_result_gen;
END_RCPP
}
// tapmat_cov
arma::mat tapmat_cov(const arma::mat& dists, double sigsq, double phi, double nu, double theta);
RcppExport SEXP _smile_tapmat_cov(SEXP distsSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dists(distsSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(tapmat_cov(dists, sigsq, phi, nu, theta));
    return rcpp_result_gen;
END_RCPP
}
// aux_tapmat
double aux_tapmat(arma::mat dist, double sigsq, double phi, double nu, double theta);
RcppExport SEXP _smile_aux_tapmat(SEXP distSEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(aux_tapmat(dist, sigsq, phi, nu, theta));
    return rcpp_result_gen;
END_RCPP
}
// comp_tapmat_cov
arma::mat comp_tapmat_cov(const List& cross_dists, int n, int n2, double sigsq, double phi, double nu, double theta);
RcppExport SEXP _smile_comp_tapmat_cov(SEXP cross_distsSEXP, SEXP nSEXP, SEXP n2SEXP, SEXP sigsqSEXP, SEXP phiSEXP, SEXP nuSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type cross_dists(cross_distsSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< double >::type sigsq(sigsqSEXP);
    Rcpp::traits::input_parameter< double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_tapmat_cov(cross_dists, n, n2, sigsq, phi, nu, theta));
    return rcpp_result_gen;
END_RCPP
}
// distmat
arma::mat distmat(const arma::mat& my_mat);
RcppExport SEXP _smile_distmat(SEXP my_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type my_mat(my_matSEXP);
    rcpp_result_gen = Rcpp::wrap(distmat(my_mat));
    return rcpp_result_gen;
END_RCPP
}
// crossdist
arma::mat crossdist(const arma::mat& m1, const arma::mat& m2);
RcppExport SEXP _smile_crossdist(SEXP m1SEXP, SEXP m2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m2(m2SEXP);
    rcpp_result_gen = Rcpp::wrap(crossdist(m1, m2));
    return rcpp_result_gen;
END_RCPP
}
// single_dists
List single_dists(const List& mat_list);
RcppExport SEXP _smile_single_dists(SEXP mat_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type mat_list(mat_listSEXP);
    rcpp_result_gen = Rcpp::wrap(single_dists(mat_list));
    return rcpp_result_gen;
END_RCPP
}
// single_dists_tr
List single_dists_tr(const List& mat_list, const LogicalVector& tr_vec, const double& tr_inp);
RcppExport SEXP _smile_single_dists_tr(SEXP mat_listSEXP, SEXP tr_vecSEXP, SEXP tr_inpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type mat_list(mat_listSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type tr_vec(tr_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type tr_inp(tr_inpSEXP);
    rcpp_result_gen = Rcpp::wrap(single_dists_tr(mat_list, tr_vec, tr_inp));
    return rcpp_result_gen;
END_RCPP
}
// mult_dists
List mult_dists(const List& mat_list1, const List& mat_list2, const bool& return_single);
RcppExport SEXP _smile_mult_dists(SEXP mat_list1SEXP, SEXP mat_list2SEXP, SEXP return_singleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type mat_list1(mat_list1SEXP);
    Rcpp::traits::input_parameter< const List& >::type mat_list2(mat_list2SEXP);
    Rcpp::traits::input_parameter< const bool& >::type return_single(return_singleSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_dists(mat_list1, mat_list2, return_single));
    return rcpp_result_gen;
END_RCPP
}
// pred_cdist
List pred_cdist(const List& mat_list, const arma::mat& pred_mat);
RcppExport SEXP _smile_pred_cdist(SEXP mat_listSEXP, SEXP pred_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type mat_list(mat_listSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type pred_mat(pred_matSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_cdist(mat_list, pred_mat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_smile_single_matern", (DL_FUNC) &_smile_single_matern, 4},
    {"_smile_single_matern3", (DL_FUNC) &_smile_single_matern3, 3},
    {"_smile_single_matern5", (DL_FUNC) &_smile_single_matern5, 3},
    {"_smile_single_exp", (DL_FUNC) &_smile_single_exp, 3},
    {"_smile_mat_cov", (DL_FUNC) &_smile_mat_cov, 4},
    {"_smile_aux_matern", (DL_FUNC) &_smile_aux_matern, 4},
    {"_smile_comp_mat_cov", (DL_FUNC) &_smile_comp_mat_cov, 6},
    {"_smile_single_pexp", (DL_FUNC) &_smile_single_pexp, 4},
    {"_smile_pexp_cov", (DL_FUNC) &_smile_pexp_cov, 4},
    {"_smile_aux_pexp", (DL_FUNC) &_smile_aux_pexp, 4},
    {"_smile_comp_pexp_cov", (DL_FUNC) &_smile_comp_pexp_cov, 6},
    {"_smile_single_gauss", (DL_FUNC) &_smile_single_gauss, 3},
    {"_smile_gauss_cov", (DL_FUNC) &_smile_gauss_cov, 3},
    {"_smile_aux_gauss", (DL_FUNC) &_smile_aux_gauss, 3},
    {"_smile_comp_gauss_cov", (DL_FUNC) &_smile_comp_gauss_cov, 5},
    {"_smile_single_spher", (DL_FUNC) &_smile_single_spher, 3},
    {"_smile_spher_cov", (DL_FUNC) &_smile_spher_cov, 3},
    {"_smile_aux_spher", (DL_FUNC) &_smile_aux_spher, 3},
    {"_smile_comp_spher_cov", (DL_FUNC) &_smile_comp_spher_cov, 5},
    {"_smile_single_cs", (DL_FUNC) &_smile_single_cs, 3},
    {"_smile_cs_cov", (DL_FUNC) &_smile_cs_cov, 3},
    {"_smile_aux_cs", (DL_FUNC) &_smile_aux_cs, 3},
    {"_smile_comp_cs_cov", (DL_FUNC) &_smile_comp_cs_cov, 5},
    {"_smile_single_gw0", (DL_FUNC) &_smile_single_gw0, 4},
    {"_smile_single_gw1", (DL_FUNC) &_smile_single_gw1, 4},
    {"_smile_single_gw2", (DL_FUNC) &_smile_single_gw2, 4},
    {"_smile_single_gw3", (DL_FUNC) &_smile_single_gw3, 4},
    {"_smile_single_gw", (DL_FUNC) &_smile_single_gw, 5},
    {"_smile_gw_cov", (DL_FUNC) &_smile_gw_cov, 5},
    {"_smile_aux_gw", (DL_FUNC) &_smile_aux_gw, 5},
    {"_smile_comp_gw_cov", (DL_FUNC) &_smile_comp_gw_cov, 7},
    {"_smile_single_tapmat", (DL_FUNC) &_smile_single_tapmat, 5},
    {"_smile_single_tapmat1", (DL_FUNC) &_smile_single_tapmat1, 4},
    {"_smile_single_tapmat3", (DL_FUNC) &_smile_single_tapmat3, 4},
    {"_smile_tapmat_cov", (DL_FUNC) &_smile_tapmat_cov, 5},
    {"_smile_aux_tapmat", (DL_FUNC) &_smile_aux_tapmat, 5},
    {"_smile_comp_tapmat_cov", (DL_FUNC) &_smile_comp_tapmat_cov, 7},
    {"_smile_distmat", (DL_FUNC) &_smile_distmat, 1},
    {"_smile_crossdist", (DL_FUNC) &_smile_crossdist, 2},
    {"_smile_single_dists", (DL_FUNC) &_smile_single_dists, 1},
    {"_smile_single_dists_tr", (DL_FUNC) &_smile_single_dists_tr, 3},
    {"_smile_mult_dists", (DL_FUNC) &_smile_mult_dists, 3},
    {"_smile_pred_cdist", (DL_FUNC) &_smile_pred_cdist, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_smile(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
